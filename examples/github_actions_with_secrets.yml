# GitHub Actions workflow demonstrating secure multi-account credential management
# This workflow shows how to use GitHub Secrets to securely store AWS credentials for multiple accounts

name: Multi-Account BOM Generation with GitHub Secrets

on:
  # Scheduled execution - daily at 6 AM UTC
  schedule:
    - cron: '0 6 * * *'
  
  # Manual trigger with account selection
  workflow_dispatch:
    inputs:
      target_accounts:
        description: 'Target accounts (comma-separated: prod,staging,dev or all)'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'prod'
          - 'staging'
          - 'dev'
          - 'prod,staging'
          - 'staging,dev'
      output_formats:
        description: 'Output formats'
        required: false
        default: 'excel,word,json'
      compliance_threshold:
        description: 'Minimum compliance percentage'
        required: false
        default: '80'

env:
  PYTHON_VERSION: '3.11'
  AWS_DEFAULT_REGION: 'us-east-1'

jobs:
  # Job 1: Production Account BOM Generation
  production-bom:
    if: contains(github.event.inputs.target_accounts, 'prod') || github.event.inputs.target_accounts == 'all' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    environment: production  # Use GitHub Environment for additional protection
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Configure Production AWS credentials
      env:
        # Production account credentials from GitHub Secrets
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN_PROD }}  # Optional
      run: |
        # Validate credentials
        aws sts get-caller-identity
        echo "✅ Production AWS credentials validated"
    
    - name: Generate Production BOM
      env:
        # AWS Credentials
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN_PROD }}
        
        # S3 Configuration
        INVENTAG_S3_BUCKET: ${{ secrets.INVENTAG_S3_BUCKET_PROD }}
        INVENTAG_S3_KEY_PREFIX: "production-bom-reports"
        
        # Notification Configuration
        INVENTAG_SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_PROD }}
        
        # Prometheus Configuration
        PROMETHEUS_PUSH_GATEWAY_URL: ${{ secrets.PROMETHEUS_PUSH_GATEWAY_URL }}
        PROMETHEUS_JOB_NAME: "inventag-github-prod"
        PROMETHEUS_INSTANCE_NAME: "github-actions-${{ github.run_number }}"
      run: |
        # Create account-specific configuration
        cat > production_account.json << EOF
        {
          "version": "1.0",
          "accounts": [
            {
              "account_id": "123456789012",
              "account_name": "Production Account",
              "regions": ["us-east-1", "us-west-2", "eu-west-1"],
              "services": ["EC2", "S3", "RDS", "Lambda", "ECS", "EKS"],
              "tags": {
                "Environment": "production",
                "Owner": "platform-team"
              }
            }
          ]
        }
        EOF
        
        # Execute BOM generation
        python scripts/cicd_bom_generation.py \
          --accounts-file production_account.json \
          --formats ${{ github.event.inputs.output_formats || 'excel,word,json' }} \
          --compliance-threshold ${{ github.event.inputs.compliance_threshold || '85' }} \
          --fail-on-security-issues \
          --fail-on-network-issues \
          --required-tags Environment Owner CostCenter \
          --s3-bucket "$INVENTAG_S3_BUCKET" \
          --s3-key-prefix "$INVENTAG_S3_KEY_PREFIX" \
          --slack-webhook "$INVENTAG_SLACK_WEBHOOK" \
          --prometheus-gateway "$PROMETHEUS_PUSH_GATEWAY_URL" \
          --prometheus-job "$PROMETHEUS_JOB_NAME" \
          --prometheus-instance "$PROMETHEUS_INSTANCE_NAME" \
          --verbose
    
    - name: Upload Production Artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: production-bom-artifacts-${{ github.run_number }}
        path: |
          bom_output/
          /tmp/pipeline_summary.json
          /tmp/compliance_gate.json
          /tmp/account_summary.json
          /tmp/s3_links.json
        retention-days: 30

  # Job 2: Staging Account BOM Generation
  staging-bom:
    if: contains(github.event.inputs.target_accounts, 'staging') || github.event.inputs.target_accounts == 'all' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Generate Staging BOM
      env:
        # AWS Credentials for Staging
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_STAGING }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_STAGING }}
        
        # S3 Configuration
        INVENTAG_S3_BUCKET: ${{ secrets.INVENTAG_S3_BUCKET_STAGING }}
        INVENTAG_S3_KEY_PREFIX: "staging-bom-reports"
        
        # Notification Configuration
        INVENTAG_SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_STAGING }}
        
        # Prometheus Configuration
        PROMETHEUS_PUSH_GATEWAY_URL: ${{ secrets.PROMETHEUS_PUSH_GATEWAY_URL }}
        PROMETHEUS_JOB_NAME: "inventag-github-staging"
        PROMETHEUS_INSTANCE_NAME: "github-actions-${{ github.run_number }}"
      run: |
        # Create staging account configuration
        cat > staging_account.json << EOF
        {
          "version": "1.0",
          "accounts": [
            {
              "account_id": "123456789013",
              "account_name": "Staging Account",
              "regions": ["us-east-1", "us-west-2"],
              "services": ["EC2", "S3", "RDS", "Lambda"],
              "tags": {
                "Environment": "staging",
                "Owner": "platform-team"
              }
            }
          ]
        }
        EOF
        
        # Execute BOM generation with staging-appropriate settings
        python scripts/cicd_bom_generation.py \
          --accounts-file staging_account.json \
          --formats ${{ github.event.inputs.output_formats || 'excel,json' }} \
          --compliance-threshold ${{ github.event.inputs.compliance_threshold || '75' }} \
          --fail-on-security-issues \
          --required-tags Environment Owner \
          --s3-bucket "$INVENTAG_S3_BUCKET" \
          --s3-key-prefix "$INVENTAG_S3_KEY_PREFIX" \
          --slack-webhook "$INVENTAG_SLACK_WEBHOOK" \
          --prometheus-gateway "$PROMETHEUS_PUSH_GATEWAY_URL" \
          --prometheus-job "$PROMETHEUS_JOB_NAME" \
          --prometheus-instance "$PROMETHEUS_INSTANCE_NAME" \
          --verbose
    
    - name: Upload Staging Artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: staging-bom-artifacts-${{ github.run_number }}
        path: |
          bom_output/
          /tmp/pipeline_summary.json
          /tmp/compliance_gate.json
        retention-days: 15

  # Job 3: Development Account BOM Generation
  development-bom:
    if: contains(github.event.inputs.target_accounts, 'dev') || github.event.inputs.target_accounts == 'all' || github.event_name == 'schedule'
    runs-on: ubuntu-latest
    environment: development
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Generate Development BOM
      env:
        # AWS Credentials for Development
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
        
        # S3 Configuration (optional for dev)
        INVENTAG_S3_BUCKET: ${{ secrets.INVENTAG_S3_BUCKET_DEV }}
        INVENTAG_S3_KEY_PREFIX: "dev-bom-reports"
        
        # Notification Configuration
        INVENTAG_SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_DEV }}
        
        # Prometheus Configuration
        PROMETHEUS_PUSH_GATEWAY_URL: ${{ secrets.PROMETHEUS_PUSH_GATEWAY_URL }}
        PROMETHEUS_JOB_NAME: "inventag-github-dev"
        PROMETHEUS_INSTANCE_NAME: "github-actions-${{ github.run_number }}"
      run: |
        # Create development account configuration
        cat > development_account.json << EOF
        {
          "version": "1.0",
          "accounts": [
            {
              "account_id": "123456789014",
              "account_name": "Development Account",
              "regions": ["us-east-1"],
              "services": ["EC2", "S3", "Lambda"],
              "tags": {
                "Environment": "development",
                "Owner": "dev-team"
              }
            }
          ]
        }
        EOF
        
        # Execute BOM generation with development-appropriate settings
        python scripts/cicd_bom_generation.py \
          --accounts-file development_account.json \
          --formats ${{ github.event.inputs.output_formats || 'json' }} \
          --compliance-threshold ${{ github.event.inputs.compliance_threshold || '60' }} \
          --required-tags Environment \
          --s3-bucket "$INVENTAG_S3_BUCKET" \
          --s3-key-prefix "$INVENTAG_S3_KEY_PREFIX" \
          --slack-webhook "$INVENTAG_SLACK_WEBHOOK" \
          --prometheus-gateway "$PROMETHEUS_PUSH_GATEWAY_URL" \
          --prometheus-job "$PROMETHEUS_JOB_NAME" \
          --prometheus-instance "$PROMETHEUS_INSTANCE_NAME" \
          --verbose
    
    - name: Upload Development Artifacts
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: development-bom-artifacts-${{ github.run_number }}
        path: |
          bom_output/
          /tmp/pipeline_summary.json
        retention-days: 7

  # Job 4: Consolidated Reporting
  consolidated-report:
    needs: [production-bom, staging-bom, development-bom]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: ./all-artifacts
    
    - name: Generate consolidated report
      env:
        INVENTAG_SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_CONSOLIDATED }}
      run: |
        echo "## 📊 Multi-Account BOM Generation Summary" > summary.md
        echo "" >> summary.md
        echo "**Execution Details:**" >> summary.md
        echo "- Workflow Run: #${{ github.run_number }}" >> summary.md
        echo "- Triggered by: ${{ github.event_name }}" >> summary.md
        echo "- Target Accounts: ${{ github.event.inputs.target_accounts || 'all' }}" >> summary.md
        echo "- Timestamp: $(date -u)" >> summary.md
        echo "" >> summary.md
        
        # Process results from each environment
        for env in production staging development; do
          if [ -d "./all-artifacts/${env}-bom-artifacts-${{ github.run_number }}" ]; then
            echo "### ${env^} Account Results" >> summary.md
            
            if [ -f "./all-artifacts/${env}-bom-artifacts-${{ github.run_number }}/tmp/pipeline_summary.json" ]; then
              summary_file="./all-artifacts/${env}-bom-artifacts-${{ github.run_number }}/tmp/pipeline_summary.json"
              success=$(cat "$summary_file" | python3 -c "import sys, json; print('✅ Success' if json.load(sys.stdin)['success'] else '❌ Failed')" 2>/dev/null || echo "❓ Unknown")
              compliance=$(cat "$summary_file" | python3 -c "import sys, json; print('✅ Passed' if json.load(sys.stdin)['compliance_gate_passed'] else '❌ Failed')" 2>/dev/null || echo "❓ Unknown")
              resources=$(cat "$summary_file" | python3 -c "import sys, json; print(json.load(sys.stdin).get('total_resources', 'Unknown'))" 2>/dev/null || echo "Unknown")
              
              echo "- Status: $success" >> summary.md
              echo "- Compliance Gate: $compliance" >> summary.md
              echo "- Total Resources: $resources" >> summary.md
            else
              echo "- Status: ❌ No results found" >> summary.md
            fi
            echo "" >> summary.md
          fi
        done
        
        # Send consolidated notification
        if [ -n "$INVENTAG_SLACK_WEBHOOK" ]; then
          curl -X POST -H 'Content-type: application/json' \
            --data "{
              \"text\": \"📊 Multi-Account BOM Generation Complete\",
              \"attachments\": [
                {
                  \"color\": \"good\",
                  \"fields\": [
                    {
                      \"title\": \"Workflow Run\",
                      \"value\": \"#${{ github.run_number }}\",
                      \"short\": true
                    },
                    {
                      \"title\": \"Target Accounts\",
                      \"value\": \"${{ github.event.inputs.target_accounts || 'all' }}\",
                      \"short\": true
                    },
                    {
                      \"title\": \"Artifacts\",
                      \"value\": \"<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Results>\",
                      \"short\": false
                    }
                  ]
                }
              ]
            }" \
            "$INVENTAG_SLACK_WEBHOOK"
        fi
        
        cat summary.md
    
    - name: Upload consolidated summary
      uses: actions/upload-artifact@v3
      with:
        name: consolidated-summary-${{ github.run_number }}
        path: summary.md
        retention-days: 90

# Required GitHub Secrets:
# Production Account:
#   - AWS_ACCESS_KEY_ID_PROD
#   - AWS_SECRET_ACCESS_KEY_PROD
#   - AWS_SESSION_TOKEN_PROD (optional)
#   - INVENTAG_S3_BUCKET_PROD
#   - SLACK_WEBHOOK_PROD
#
# Staging Account:
#   - AWS_ACCESS_KEY_ID_STAGING
#   - AWS_SECRET_ACCESS_KEY_STAGING
#   - INVENTAG_S3_BUCKET_STAGING
#   - SLACK_WEBHOOK_STAGING
#
# Development Account:
#   - AWS_ACCESS_KEY_ID_DEV
#   - AWS_SECRET_ACCESS_KEY_DEV
#   - INVENTAG_S3_BUCKET_DEV (optional)
#   - SLACK_WEBHOOK_DEV
#
# Shared:
#   - PROMETHEUS_PUSH_GATEWAY_URL
#   - SLACK_WEBHOOK_CONSOLIDATED