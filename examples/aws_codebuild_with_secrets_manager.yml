# AWS CodeBuild buildspec for multi-account BOM generation using AWS Secrets Manager
# This buildspec demonstrates secure credential management using AWS Secrets Manager

version: 0.2

env:
  variables:
    # Build configuration
    PYTHON_VERSION: "3.11"
    OUTPUT_FORMATS: "excel,word,json"
    COMPLIANCE_THRESHOLD: "80"
    
    # Prometheus configuration
    PROMETHEUS_JOB_NAME: "inventag-codebuild"
    
  parameter-store:
    # Non-sensitive configuration from Parameter Store
    INVENTAG_S3_BUCKET: "/inventag/s3/bucket-name"
    INVENTAG_S3_KEY_PREFIX: "/inventag/s3/key-prefix"
    PROMETHEUS_PUSH_GATEWAY_URL: "/inventag/prometheus/push-gateway-url"
    SLACK_WEBHOOK_URL: "/inventag/notifications/slack-webhook"
    
  secrets-manager:
    # AWS credentials stored securely in Secrets Manager
    # Production account credentials
    PROD_AWS_ACCESS_KEY_ID: "inventag/credentials/production:aws_access_key_id"
    PROD_AWS_SECRET_ACCESS_KEY: "inventag/credentials/production:aws_secret_access_key"
    PROD_AWS_SESSION_TOKEN: "inventag/credentials/production:aws_session_token"
    
    # Staging account credentials
    STAGING_AWS_ACCESS_KEY_ID: "inventag/credentials/staging:aws_access_key_id"
    STAGING_AWS_SECRET_ACCESS_KEY: "inventag/credentials/staging:aws_secret_access_key"
    
    # Development account credentials
    DEV_AWS_ACCESS_KEY_ID: "inventag/credentials/development:aws_access_key_id"
    DEV_AWS_SECRET_ACCESS_KEY: "inventag/credentials/development:aws_secret_access_key"

phases:
  install:
    runtime-versions:
      python: $PYTHON_VERSION
    commands:
      - echo "Installing dependencies..."
      - python -m pip install --upgrade pip
      - pip install -r requirements.txt
      - pip install boto3 awscli
      
      # Verify CodeBuild service role has access to Secrets Manager
      - echo "Verifying Secrets Manager access..."
      - aws secretsmanager describe-secret --secret-id "inventag/credentials/production" --region $AWS_DEFAULT_REGION
      
  pre_build:
    commands:
      - echo "Pre-build phase started on `date`"
      - echo "Build ID: $CODEBUILD_BUILD_ID"
      - echo "Project: $CODEBUILD_BUILD_PROJECT"
      
      # Set dynamic environment variables
      - export PROMETHEUS_INSTANCE_NAME="codebuild-${CODEBUILD_BUILD_ID}"
      - export INVENTAG_S3_KEY_PREFIX_FULL="${INVENTAG_S3_KEY_PREFIX}/codebuild-${CODEBUILD_BUILD_ID}"
      
      # Determine which accounts to process based on environment or trigger
      - |
        if [ "$TARGET_ENVIRONMENT" = "production" ]; then
          export ACCOUNTS_TO_PROCESS="production"
        elif [ "$TARGET_ENVIRONMENT" = "staging" ]; then
          export ACCOUNTS_TO_PROCESS="staging"
        elif [ "$TARGET_ENVIRONMENT" = "development" ]; then
          export ACCOUNTS_TO_PROCESS="development"
        else
          export ACCOUNTS_TO_PROCESS="production,staging,development"
        fi
      
      - echo "Accounts to process: $ACCOUNTS_TO_PROCESS"
      
  build:
    commands:
      - echo "Build phase started on `date`"
      - echo "Processing accounts: $ACCOUNTS_TO_PROCESS"
      
      # Process Production Account
      - |
        if [[ "$ACCOUNTS_TO_PROCESS" == *"production"* ]]; then
          echo "🏭 Processing Production Account..."
          
          # Create production account configuration
          cat > production_account.json << EOF
        {
          "version": "1.0",
          "accounts": [
            {
              "account_id": "123456789012",
              "account_name": "Production Account",
              "regions": ["us-east-1", "us-west-2", "eu-west-1"],
              "services": ["EC2", "S3", "RDS", "Lambda", "ECS", "EKS"],
              "tags": {
                "Environment": "production",
                "Owner": "platform-team",
                "CostCenter": "engineering"
              }
            }
          ]
        }
        EOF
          
          # Set production credentials
          export AWS_ACCESS_KEY_ID="$PROD_AWS_ACCESS_KEY_ID"
          export AWS_SECRET_ACCESS_KEY="$PROD_AWS_SECRET_ACCESS_KEY"
          export AWS_SESSION_TOKEN="$PROD_AWS_SESSION_TOKEN"
          
          # Validate production credentials
          aws sts get-caller-identity
          
          # Execute BOM generation for production
          python scripts/cicd_bom_generation.py \
            --accounts-file production_account.json \
            --formats $OUTPUT_FORMATS \
            --output-dir "./bom_output/production" \
            --compliance-threshold 85 \
            --fail-on-security-issues \
            --fail-on-network-issues \
            --required-tags Environment Owner CostCenter \
            --s3-bucket "$INVENTAG_S3_BUCKET" \
            --s3-key-prefix "${INVENTAG_S3_KEY_PREFIX_FULL}/production" \
            --slack-webhook "$SLACK_WEBHOOK_URL" \
            --prometheus-gateway "$PROMETHEUS_PUSH_GATEWAY_URL" \
            --prometheus-job "${PROMETHEUS_JOB_NAME}-production" \
            --prometheus-instance "$PROMETHEUS_INSTANCE_NAME" \
            --verbose
          
          # Save production results
          if [ -f "/tmp/pipeline_summary.json" ]; then
            cp /tmp/pipeline_summary.json ./production_summary.json
          fi
          
          echo "✅ Production account processing completed"
        fi
      
      # Process Staging Account
      - |
        if [[ "$ACCOUNTS_TO_PROCESS" == *"staging"* ]]; then
          echo "🧪 Processing Staging Account..."
          
          # Create staging account configuration
          cat > staging_account.json << EOF
        {
          "version": "1.0",
          "accounts": [
            {
              "account_id": "123456789013",
              "account_name": "Staging Account",
              "regions": ["us-east-1", "us-west-2"],
              "services": ["EC2", "S3", "RDS", "Lambda"],
              "tags": {
                "Environment": "staging",
                "Owner": "platform-team"
              }
            }
          ]
        }
        EOF
          
          # Set staging credentials
          export AWS_ACCESS_KEY_ID="$STAGING_AWS_ACCESS_KEY_ID"
          export AWS_SECRET_ACCESS_KEY="$STAGING_AWS_SECRET_ACCESS_KEY"
          unset AWS_SESSION_TOKEN  # Clear any previous session token
          
          # Validate staging credentials
          aws sts get-caller-identity
          
          # Execute BOM generation for staging
          python scripts/cicd_bom_generation.py \
            --accounts-file staging_account.json \
            --formats $OUTPUT_FORMATS \
            --output-dir "./bom_output/staging" \
            --compliance-threshold 75 \
            --fail-on-security-issues \
            --required-tags Environment Owner \
            --s3-bucket "$INVENTAG_S3_BUCKET" \
            --s3-key-prefix "${INVENTAG_S3_KEY_PREFIX_FULL}/staging" \
            --slack-webhook "$SLACK_WEBHOOK_URL" \
            --prometheus-gateway "$PROMETHEUS_PUSH_GATEWAY_URL" \
            --prometheus-job "${PROMETHEUS_JOB_NAME}-staging" \
            --prometheus-instance "$PROMETHEUS_INSTANCE_NAME" \
            --verbose
          
          # Save staging results
          if [ -f "/tmp/pipeline_summary.json" ]; then
            cp /tmp/pipeline_summary.json ./staging_summary.json
          fi
          
          echo "✅ Staging account processing completed"
        fi
      
      # Process Development Account
      - |
        if [[ "$ACCOUNTS_TO_PROCESS" == *"development"* ]]; then
          echo "🛠️ Processing Development Account..."
          
          # Create development account configuration
          cat > development_account.json << EOF
        {
          "version": "1.0",
          "accounts": [
            {
              "account_id": "123456789014",
              "account_name": "Development Account",
              "regions": ["us-east-1"],
              "services": ["EC2", "S3", "Lambda"],
              "tags": {
                "Environment": "development",
                "Owner": "dev-team"
              }
            }
          ]
        }
        EOF
          
          # Set development credentials
          export AWS_ACCESS_KEY_ID="$DEV_AWS_ACCESS_KEY_ID"
          export AWS_SECRET_ACCESS_KEY="$DEV_AWS_SECRET_ACCESS_KEY"
          unset AWS_SESSION_TOKEN  # Clear any previous session token
          
          # Validate development credentials
          aws sts get-caller-identity
          
          # Execute BOM generation for development
          python scripts/cicd_bom_generation.py \
            --accounts-file development_account.json \
            --formats json \
            --output-dir "./bom_output/development" \
            --compliance-threshold 60 \
            --required-tags Environment \
            --s3-bucket "$INVENTAG_S3_BUCKET" \
            --s3-key-prefix "${INVENTAG_S3_KEY_PREFIX_FULL}/development" \
            --slack-webhook "$SLACK_WEBHOOK_URL" \
            --prometheus-gateway "$PROMETHEUS_PUSH_GATEWAY_URL" \
            --prometheus-job "${PROMETHEUS_JOB_NAME}-development" \
            --prometheus-instance "$PROMETHEUS_INSTANCE_NAME" \
            --verbose
          
          # Save development results
          if [ -f "/tmp/pipeline_summary.json" ]; then
            cp /tmp/pipeline_summary.json ./development_summary.json
          fi
          
          echo "✅ Development account processing completed"
        fi
      
      - echo "All account processing completed"
      
  post_build:
    commands:
      - echo "Post-build phase started on `date`"
      
      # Generate consolidated summary
      - |
        echo "📊 Generating consolidated summary..."
        
        cat > consolidated_summary.json << EOF
        {
          "build_id": "$CODEBUILD_BUILD_ID",
          "build_project": "$CODEBUILD_BUILD_PROJECT",
          "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
          "accounts_processed": "$ACCOUNTS_TO_PROCESS",
          "results": {}
        }
        EOF
        
        # Process results from each account
        for account in production staging development; do
          if [ -f "./${account}_summary.json" ]; then
            echo "Processing ${account} results..."
            
            # Extract key metrics
            SUCCESS=$(cat "${account}_summary.json" | python3 -c "import sys, json; print(json.load(sys.stdin)['success'])" 2>/dev/null || echo "false")
            COMPLIANCE=$(cat "${account}_summary.json" | python3 -c "import sys, json; print(json.load(sys.stdin)['compliance_gate_passed'])" 2>/dev/null || echo "false")
            RESOURCES=$(cat "${account}_summary.json" | python3 -c "import sys, json; print(json.load(sys.stdin).get('total_resources', 0))" 2>/dev/null || echo "0")
            EXECUTION_TIME=$(cat "${account}_summary.json" | python3 -c "import sys, json; print(json.load(sys.stdin)['execution_time_seconds'])" 2>/dev/null || echo "0")
            
            echo "${account^} Account Results:"
            echo "  Success: $SUCCESS"
            echo "  Compliance Gate: $COMPLIANCE"
            echo "  Total Resources: $RESOURCES"
            echo "  Execution Time: ${EXECUTION_TIME}s"
            
            # Add to consolidated summary
            python3 << EOF
        import json
        
        # Load consolidated summary
        with open('consolidated_summary.json', 'r') as f:
            summary = json.load(f)
        
        # Add account results
        summary['results']['$account'] = {
            'success': $SUCCESS,
            'compliance_gate_passed': $COMPLIANCE,
            'total_resources': $RESOURCES,
            'execution_time_seconds': $EXECUTION_TIME
        }
        
        # Save updated summary
        with open('consolidated_summary.json', 'w') as f:
            json.dump(summary, f, indent=2)
        EOF
          fi
        done
        
        # Display final summary
        echo "📋 Final Summary:"
        cat consolidated_summary.json | python3 -m json.tool
        
        # Check for any failures
        OVERALL_SUCCESS=true
        for account in production staging development; do
          if [ -f "./${account}_summary.json" ]; then
            SUCCESS=$(cat "${account}_summary.json" | python3 -c "import sys, json; print(json.load(sys.stdin)['success'])" 2>/dev/null || echo "false")
            COMPLIANCE=$(cat "${account}_summary.json" | python3 -c "import sys, json; print(json.load(sys.stdin)['compliance_gate_passed'])" 2>/dev/null || echo "false")
            
            if [ "$SUCCESS" != "True" ] || [ "$COMPLIANCE" != "True" ]; then
              OVERALL_SUCCESS=false
              echo "❌ ${account^} account failed or compliance gate failed"
            fi
          fi
        done
        
        if [ "$OVERALL_SUCCESS" = "true" ]; then
          echo "✅ All accounts processed successfully with compliance gates passed"
        else
          echo "❌ One or more accounts failed or compliance gates failed"
          exit 1
        fi
      
      - echo "Build completed on `date`"

artifacts:
  files:
    # Generated BOM documents
    - 'bom_output/**/*'
    
    # Individual account summaries
    - 'production_summary.json'
    - 'staging_summary.json'
    - 'development_summary.json'
    
    # Consolidated summary
    - 'consolidated_summary.json'
    
    # CI/CD artifacts from the last processed account
    - '/tmp/pipeline_summary.json'
    - '/tmp/compliance_gate.json'
    - '/tmp/account_summary.json'
    - '/tmp/s3_links.json'
    - '/tmp/inventag_metrics.prom'
    
  name: inventag-multi-account-bom-$CODEBUILD_BUILD_ID
  
cache:
  paths:
    - '/root/.cache/pip/**/*'

# Required AWS Secrets Manager Secrets:
# 
# 1. inventag/credentials/production
#    {
#      "aws_access_key_id": "AKIAIOSFODNN7EXAMPLE",
#      "aws_secret_access_key": "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY",
#      "aws_session_token": "optional-session-token"
#    }
#
# 2. inventag/credentials/staging
#    {
#      "aws_access_key_id": "AKIAI44QH8DHBEXAMPLE",
#      "aws_secret_access_key": "je7MtGbClwBF/2Zp9Utk/h3yCo8nvbEXAMPLEKEY"
#    }
#
# 3. inventag/credentials/development
#    {
#      "aws_access_key_id": "AKIAIOSFODNN7DEVEXAMPLE",
#      "aws_secret_access_key": "devJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
#    }
#
# Required IAM Permissions for CodeBuild Service Role:
# - secretsmanager:GetSecretValue
# - secretsmanager:DescribeSecret
# - s3:PutObject (for S3 uploads)
# - sts:AssumeRole (if using cross-account roles)
#
# Required Parameter Store Parameters:
# - /inventag/s3/bucket-name
# - /inventag/s3/key-prefix
# - /inventag/prometheus/push-gateway-url
# - /inventag/notifications/slack-webhook