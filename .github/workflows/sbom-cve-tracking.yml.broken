name: SBOM Generation and CVE Tracking

"on":
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly CVE monitoring on Mondays at 3 AM UTC
    - cron: '0 3 * * 1'
  workflow_dispatch:
    inputs:
      generate_comparison:
        description: 'Generate version comparison'
        required: false
        default: true
        type: boolean
      target_version:
        description: 'Compare against specific version (optional)'
        required: false
        type: string

permissions:
  contents: write
  security-events: write
  issues: write
  pull-requests: write

jobs:
  sbom-generation:
    name: SBOM Generation and CVE Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    outputs:
      sbom-generated: ${{ steps.sbom-gen.outputs.sbom-generated }}
      cve-count: ${{ steps.cve-analysis.outputs.cve-count }}
      current-version: ${{ steps.version-info.outputs.current-version }}
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for version comparison
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'website/package-lock.json'

    - name: Install SBOM and CVE analysis tools
      shell: bash
      run: |
        echo "📦 Installing SBOM and CVE Analysis Tools"
        echo "========================================"
        
        # Python SBOM tools
        pip install cyclonedx-bom cyclonedx-python-lib pip-audit
        pip install safety vulners requests python-dateutil
        pip install packaging semver
        
        # Install Syft for comprehensive SBOM generation
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        
        # Install Grype for vulnerability scanning
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
        
        # Install SBOM tools for Node.js
        npm install -g @cyclonedx/cyclonedx-npm
        
        # Install additional CVE tools
        wget -q https://github.com/aquasecurity/trivy/releases/latest/download/trivy_Linux-64bit.tar.gz
        tar zxvf trivy_Linux-64bit.tar.gz
        sudo mv trivy /usr/local/bin/
        
        echo "✅ All SBOM and CVE tools installed"

    - name: Extract version information
      id: version-info
      shell: bash
      run: |
        echo "📋 Extracting Version Information"
        echo "================================"
        
        # Make version script executable
        chmod +x scripts/get-version.sh
        
        # Get current version using the version script with fallback
        CURRENT_VERSION=$(./scripts/get-version.sh --format=semver 2>/dev/null || echo "v0.0.0-unknown")
        
        # Ensure we have a valid version string
        if [ -z "$CURRENT_VERSION" ] || [ "$CURRENT_VERSION" = "" ]; then
          CURRENT_VERSION="v0.0.0-$(git rev-parse --short HEAD 2>/dev/null || echo 'unknown')"
        fi
        
        echo "📝 Determined version: $CURRENT_VERSION"
        
        # Get previous version for comparison
        PREVIOUS_VERSION=$(git tag --sort=-version:refname | head -1)
        if [ -z "$PREVIOUS_VERSION" ]; then
          PREVIOUS_VERSION="v0.0.0"  # Fallback for initial version
        fi
        
        echo "📊 Version comparison:"
        echo "- Current: $CURRENT_VERSION"
        echo "- Previous: $PREVIOUS_VERSION"
        echo "- Target (manual): ${{ github.event.inputs.target_version }}"
        
        # Use manual target if specified
        if [ -n "${{ github.event.inputs.target_version }}" ]; then
          PREVIOUS_VERSION="${{ github.event.inputs.target_version }}"
        fi
        
        echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "previous-version=$PREVIOUS_VERSION" >> $GITHUB_OUTPUT
        echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_ENV
        echo "PREVIOUS_VERSION=$PREVIOUS_VERSION" >> $GITHUB_ENV

    - name: Generate comprehensive SBOM
      id: sbom-gen
      shell: bash
      run: |
        echo "📄 Generating Comprehensive Software Bill of Materials"
        echo "===================================================="
        
        mkdir -p sbom-reports/{current,previous,comparison}
        
        echo "🐍 Generating Python SBOM..."
        
        # Generate Python SBOM using multiple tools for comprehensive coverage
        if [ -f "requirements.txt" ]; then
          echo "📝 Found requirements.txt, generating SBOM..."
          cyclonedx-py requirements --output-format JSON --output-file sbom-reports/current/python-requirements-sbom.json requirements.txt
          cyclonedx-py requirements --output-format XML --output-file sbom-reports/current/python-requirements-sbom.xml requirements.txt
        else
          echo "ℹ️ No requirements.txt found, skipping requirements-based SBOM"
        fi
        
        # Generate SBOM from installed packages  
        cyclonedx-py environment --output-format JSON --output-file sbom-reports/current/python-installed-sbom.json
        
        # Generate comprehensive repository SBOM using Syft
        echo "🔍 Generating repository-wide SBOM with Syft..."
        syft . -o json=sbom-reports/current/repository-sbom.json
        syft . -o spdx-json=sbom-reports/current/repository-sbom-spdx.json
        syft . -o cyclonedx-json=sbom-reports/current/repository-sbom-cyclonedx.json
        
        echo "🟨 Generating JavaScript/Node.js SBOM..."
        
        # Generate Node.js SBOM for website if exists
        if [ -f "website/package.json" ]; then
          cd website
          npm install --silent
          cyclonedx-npm --output-file ../sbom-reports/current/nodejs-website-sbom.json
          cd ..
        fi
        
        echo "✅ SBOM generation completed"
        
        # Count total components
        TOTAL_COMPONENTS=$(jq '.components | length' sbom-reports/current/repository-sbom-cyclonedx.json 2>/dev/null || echo "0")
        echo "📊 Total components in SBOM: $TOTAL_COMPONENTS"
        
        echo "sbom-generated=true" >> $GITHUB_OUTPUT
        echo "total-components=$TOTAL_COMPONENTS" >> $GITHUB_OUTPUT

    - name: CVE vulnerability analysis
      id: cve-analysis
      shell: bash
      run: |
        echo "🔒 CVE Vulnerability Analysis"
        echo "============================"
        
        mkdir -p cve-reports/{current,historical}
        
        echo "🔍 Running vulnerability scans..."
        
        # Scan with Grype for comprehensive CVE detection
        grype sbom-reports/current/repository-sbom.json -o json > cve-reports/current/grype-vulnerabilities.json || true
        grype sbom-reports/current/repository-sbom.json -o table > cve-reports/current/grype-vulnerabilities.txt || true
        
        # Scan with Trivy
        trivy sbom sbom-reports/current/repository-sbom-cyclonedx.json --format json --output cve-reports/current/trivy-vulnerabilities.json || true
        
        # Python-specific vulnerability analysis
        if [ -f "requirements.txt" ]; then
          echo "🐍 Python vulnerability analysis..."
          safety check -r requirements.txt --json --output cve-reports/current/safety-vulnerabilities.json || true
          pip-audit --format=json --output=cve-reports/current/pip-audit-vulnerabilities.json || true
        fi
        
        # Node.js vulnerability analysis
        if [ -f "website/package.json" ]; then
          echo "🟨 Node.js vulnerability analysis..."
          cd website
          npm audit --json > ../cve-reports/current/npm-audit-vulnerabilities.json || true
          cd ..
        fi
        
        # Aggregate CVE analysis
        echo "📊 Aggregating CVE results..."
        
        GRYPE_COUNT=$(jq '.matches | length' cve-reports/current/grype-vulnerabilities.json 2>/dev/null || echo "0")
        TRIVY_COUNT=$(jq '.Results[0].Vulnerabilities | length' cve-reports/current/trivy-vulnerabilities.json 2>/dev/null || echo "0")
        SAFETY_COUNT=$(jq '. | length' cve-reports/current/safety-vulnerabilities.json 2>/dev/null || echo "0")
        NPM_COUNT=$(jq '.vulnerabilities | length' cve-reports/current/npm-audit-vulnerabilities.json 2>/dev/null || echo "0")
        
        TOTAL_CVES=$((GRYPE_COUNT + TRIVY_COUNT + SAFETY_COUNT + NPM_COUNT))
        
        echo "🔢 CVE Summary:"
        echo "- Grype findings: $GRYPE_COUNT"
        echo "- Trivy findings: $TRIVY_COUNT" 
        echo "- Safety findings: $SAFETY_COUNT"
        echo "- npm audit findings: $NPM_COUNT"
        echo "- Total CVE findings: $TOTAL_CVES"
        
        # Generate simple CVE summary
        echo "{" > cve-reports/current/cve-summary.json
        echo "  \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"," >> cve-reports/current/cve-summary.json
        echo "  \"version\": \"$CURRENT_VERSION\"," >> cve-reports/current/cve-summary.json
        echo "  \"total_cves\": $TOTAL_CVES," >> cve-reports/current/cve-summary.json
        echo "  \"sources\": {" >> cve-reports/current/cve-summary.json
        echo "    \"grype\": $GRYPE_COUNT," >> cve-reports/current/cve-summary.json
        echo "    \"trivy\": $TRIVY_COUNT," >> cve-reports/current/cve-summary.json
        echo "    \"safety\": $SAFETY_COUNT," >> cve-reports/current/cve-summary.json
        echo "    \"npm_audit\": $NPM_COUNT" >> cve-reports/current/cve-summary.json
        echo "  }," >> cve-reports/current/cve-summary.json
        echo "  \"scan_tools\": [\"grype\", \"trivy\", \"safety\", \"npm-audit\"]" >> cve-reports/current/cve-summary.json
        echo "}" >> cve-reports/current/cve-summary.json
        
        echo "cve-count=$TOTAL_CVES" >> $GITHUB_OUTPUT
        echo "TOTAL_CVES=$TOTAL_CVES" >> $GITHUB_ENV

    - name: Upload SBOM and CVE artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: sbom-cve-reports-${{ steps.version-info.outputs.current-version }}
        path: |
          sbom-reports/
          cve-reports/
        retention-days: 365  # Keep for a full year for security tracking
        compression-level: 9

    - name: Generate workflow summary
      if: always()
      shell: bash
      run: |
        echo "## 🔒 SBOM and CVE Tracking Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Summary Statistics" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ env.CURRENT_VERSION }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Total CVE Findings**: ${{ env.TOTAL_CVES }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Components in SBOM**: $(jq '.components | length' sbom-reports/current/repository-sbom-cyclonedx.json 2>/dev/null || echo 'Unknown')" >> $GITHUB_STEP_SUMMARY
        echo "- **Scan Date**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🛡️ Security Analysis Tools" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Grype**: Comprehensive vulnerability scanning" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Trivy**: Multi-source vulnerability detection" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Safety**: Python dependency security" >> $GITHUB_STEP_SUMMARY  
        echo "- ✅ **npm audit**: Node.js dependency security" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ **Syft**: SBOM generation" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📁 Generated Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "- Software Bill of Materials (SBOM) in multiple formats" >> $GITHUB_STEP_SUMMARY
        echo "- CVE vulnerability reports and analysis" >> $GITHUB_STEP_SUMMARY
        echo "- Security summary and tracking data" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📋 **Next Steps**: Review security findings and update vulnerable dependencies as needed." >> $GITHUB_STEP_SUMMARY

  security-monitoring:
    name: Security Monitoring and Alerts
    runs-on: ubuntu-latest
    needs: sbom-generation
    if: always()
    
    steps:
    - name: Download SBOM artifacts
      uses: actions/download-artifact@v4
      with:
        name: sbom-cve-reports-${{ needs.sbom-generation.outputs.current-version }}
        path: security-artifacts/
    
    - name: Analyze security trends
      shell: bash
      run: |
        echo "📈 Security Trend Analysis"
        echo "========================="
        
        # Analyze CVE trends if historical data exists
        CVE_COUNT="${{ needs.sbom-generation.outputs.cve-count }}"
        
        if [ "$CVE_COUNT" -gt 20 ]; then
          echo "🚨 HIGH ALERT: $CVE_COUNT vulnerabilities detected"
          echo "SECURITY_ALERT_LEVEL=HIGH" >> $GITHUB_ENV
        elif [ "$CVE_COUNT" -gt 10 ]; then
          echo "⚠️ MEDIUM ALERT: $CVE_COUNT vulnerabilities detected"
          echo "SECURITY_ALERT_LEVEL=MEDIUM" >> $GITHUB_ENV
        else
          echo "✅ LOW ALERT: $CVE_COUNT vulnerabilities detected"
          echo "SECURITY_ALERT_LEVEL=LOW" >> $GITHUB_ENV
        fi
        
        echo "Security alert level: $SECURITY_ALERT_LEVEL"
        
    - name: Create security issue on high alert
      if: env.SECURITY_ALERT_LEVEL == 'HIGH'
      uses: actions/github-script@v7
      with:
        script: |
          const cveCount = '${{ needs.sbom-generation.outputs.cve-count }}';
          const version = '${{ needs.sbom-generation.outputs.current-version }}';
          
          const title = `🚨 Security Alert: ${cveCount} vulnerabilities detected in ${version}`;
          const body = `## High Priority Security Alert
          
          **Version**: ${version}  
          **CVE Count**: ${cveCount}  
          **Alert Level**: HIGH  
          **Detection Date**: ${new Date().toISOString()}
          
          ### Summary
          
          A comprehensive security scan has detected **${cveCount} vulnerabilities** in the current codebase, which exceeds the HIGH alert threshold.
          
          ### Immediate Actions Required
          
          1. **Review Security Reports**: Download and analyze the security scan artifacts
          2. **Prioritize Critical/High Severity**: Address critical and high-severity vulnerabilities first  
          3. **Update Dependencies**: Update vulnerable dependencies to secure versions
          4. **Security Review**: Conduct security review of affected components
          5. **Testing**: Test fixes thoroughly before deployment
          
          ### Resources
          
          - **Workflow Run**: [SBOM and CVE Tracking #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          - **Security Documentation**: Available in workflow artifacts
          - **SBOM Reports**: Available in workflow artifacts
          
          ### Timeline
          
          - **Detection**: ${new Date().toISOString()}
          - **Review Due**: ${new Date(Date.now() + 24*60*60*1000).toISOString()} (24 hours)
          - **Remediation Target**: ${new Date(Date.now() + 7*24*60*60*1000).toISOString()} (7 days)
          
          ---
          
          *This issue was automatically created by the SBOM and CVE Tracking workflow.*
          `;
          
          try {
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'urgent', 'automated']
            });
            console.log('🚨 High-priority security issue created');
          } catch (error) {
            console.log('⚠️ Could not create security issue:', error.message);
          }

    - name: Security monitoring summary
      shell: bash
      run: |
        echo "🎯 Security Monitoring Complete"
        echo "==============================="
        echo ""
        echo "📊 **Final Security Status**:"
        echo "- Version Analyzed: ${{ needs.sbom-generation.outputs.current-version }}"
        echo "- CVE Findings: ${{ needs.sbom-generation.outputs.cve-count }}"
        echo "- Alert Level: ${SECURITY_ALERT_LEVEL:-UNKNOWN}"
        echo "- SBOM Generated: ${{ needs.sbom-generation.outputs.sbom-generated }}"
        echo ""
        echo "🛡️ **Security Pipeline Status**: ✅ COMPLETED"
        echo "📋 **Documentation**: Generated automatically"
        echo "🔔 **Monitoring**: Active and tracking trends"
        echo ""
        echo "Next security scan scheduled for next push/PR or weekly schedule."