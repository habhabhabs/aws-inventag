name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    name: Python Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        pip install pytest pytest-cov flake8 black mypy

    - name: Run linting with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 scripts/ inventag/ --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 scripts/ inventag/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

    - name: Check code formatting with black
      run: |
        black --check scripts/ inventag/

    - name: Type checking with mypy
      run: |
        mypy scripts/ inventag/ --ignore-missing-imports || true

    - name: Test core functionality
      run: |
        # Run test suite if tests directory exists
        if [ -d "tests" ]; then
          python -m pytest tests/ -v --cov=inventag --cov-report=xml || true
        fi
        
        # Test all main scripts - updated paths for new structure
        python scripts/legacy/bom_converter.py --help
        python scripts/legacy/tag_compliance_checker.py --help
        python scripts/development/cicd_bom_generation.py --help
        
        # Test AWS resource inventory if it exists
        if [ -f "scripts/legacy/aws_resource_inventory.py" ]; then
          python scripts/legacy/aws_resource_inventory.py --help
        fi
        
        # Test production scripts
        python scripts/production/production_monitor.py --help
        python scripts/production/security_validator.py --help
        python scripts/production/multi_account_scanner.py --help
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety

    - name: Run Bandit security scan
      run: |
        bandit -r scripts/ -f json -o bandit-report.json || true
        bandit -r scripts/ || true

    - name: Check for known vulnerabilities
      run: |
        safety check || true

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Create sample test data
      run: |
        mkdir -p test-data
        cat > test-data/sample.json << 'EOF'
        {
          "all_discovered_resources": [
            {
              "service": "S3",
              "type": "Bucket",
              "region": "us-east-1",
              "id": "test-bucket",
              "name": "test-bucket",
              "arn": "arn:aws:s3:::test-bucket",
              "account_id": "123456789012",
              "tags": {"Environment": "test", "Owner": "TeamA"},
              "discovered_via": "ResourceGroupsTaggingAPI"
            },
            {
              "service": "EC2",
              "type": "Instance",
              "region": "us-east-1",
              "id": "i-1234567890abcdef0",
              "name": "test-instance",
              "arn": "arn:aws:ec2:us-east-1:123456789012:instance/i-1234567890abcdef0",
              "account_id": "123456789012",
              "tags": {"Environment": "test"},
              "discovered_via": "EC2"
            }
          ]
        }
        EOF
        
        # Create sample tag policy configuration
        cat > test-data/tag_policy.yaml << 'EOF'
        required_tags:
          - "Environment"
          - "Owner"
          - key: "Environment"
            allowed_values:
              - "dev"
              - "test"
              - "staging"
              - "prod"
        EOF

    - name: Test BOM converter with sample data
      run: |
        python scripts/legacy/bom_converter.py \
          --input test-data/sample.json \
          --output test-output.xlsx \
          --no-vpc-enrichment
        
        # Verify output file was created
        ls -la test-output.xlsx
        
        # Test CSV format
        python scripts/legacy/bom_converter.py \
          --input test-data/sample.json \
          --output test-output.csv \
          --format csv \
          --no-vpc-enrichment
        
        ls -la test-output.csv

    - name: Test tag compliance checker
      run: |
        python scripts/legacy/tag_compliance_checker.py \
          --config test-data/tag_policy.yaml \
          --input test-data/sample.json \
          --output compliance-report \
          --format json
        
        # Verify compliance report was created (with timestamp)
        ls -la compliance-report_*.json
        echo "âœ… Tag compliance checker works correctly"

    - name: Test CI/CD BOM generation
      run: |
        # Create a simple accounts configuration
        cat > test-data/accounts.json << 'EOF'
        [
          {
            "account_id": "123456789012",
            "account_name": "test-account",
            "environment": "test",
            "access_key_id": null,
            "secret_access_key": null,
            "profile_name": null,
            "role_arn": null
          }
        ]
        EOF
        
        # Test help and configuration validation
        python scripts/development/cicd_bom_generation.py --help || true