name: Generate SBOM and Security Reports

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:

permissions:
  contents: write
  security-events: write

jobs:
  generate-sbom:
    name: Generate SBOM and Security Reports
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.VERSION_BUMP_WORKFLOW || secrets.GITHUB_TOKEN }}
        
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: 'website/package-lock.json'

    - name: Install SBOM tools
      shell: bash
      run: |
        echo "🔧 Installing SBOM generation tools..."
        
        # Install Python SBOM tools
        pip install cyclonedx-bom cyclonedx-python-lib
        
        # Install Syft
        curl -sSfL https://raw.githubusercontent.com/anchore/syft/main/install.sh | sh -s -- -b /usr/local/bin
        
        # Install Grype for vulnerability scanning
        curl -sSfL https://raw.githubusercontent.com/anchore/grype/main/install.sh | sh -s -- -b /usr/local/bin
        
        echo "✅ Tools installed successfully"

    - name: Create directories
      shell: bash
      run: |
        mkdir -p docs/security/{current,sbom,monitoring}
        mkdir -p website/static/sbom

    - name: Generate SBOM files
      shell: bash
      run: |
        echo "📄 Generating Software Bill of Materials..."
        
        # Generate comprehensive SBOM using Syft (multiple formats)
        syft . -o json=docs/security/sbom/current-sbom.json || echo "Syft JSON generation failed"
        syft . -o cyclonedx-json=docs/security/sbom/current-sbom-cyclonedx.json || echo "CycloneDX generation failed"
        syft . -o spdx-json=docs/security/sbom/current-sbom-spdx.json || echo "SPDX generation failed"
        
        # Generate Python-specific SBOM if requirements.txt exists
        if [ -f "requirements.txt" ]; then
          echo "🐍 Generating Python SBOM..."
          cyclonedx-py requirements --output-format json --output-file docs/security/sbom/python-sbom.json requirements.txt || echo "Python SBOM generation failed"
        fi
        
        # Generate Node.js SBOM for website if package.json exists
        if [ -f "website/package.json" ]; then
          echo "🟨 Generating Node.js SBOM..."
          cd website
          npm ci --prefer-offline --no-audit --silent || echo "npm install failed"
          npm install -g @cyclonedx/cyclonedx-npm || echo "cyclonedx-npm install failed"
          cyclonedx-npm --output-file ../docs/security/sbom/nodejs-website-sbom.json || echo "Node.js SBOM generation failed"
          cd ..
        fi
        
        # Copy SBOM files to website static directory
        echo "📋 Copying SBOM files to static directory..."
        for file in docs/security/sbom/*.json; do
          if [ -f "$file" ]; then
            filename=$(basename "$file")
            cp "$file" "website/static/sbom/"
            echo "Copied: $filename"
          fi
        done
        
        echo "✅ SBOM generation completed"

    - name: Run vulnerability scans
      shell: bash
      run: |
        echo "🔍 Running vulnerability scans..."
        
        mkdir -p docs/security/cve-reports
        
        # Scan with Grype if SBOM exists
        if [ -f "docs/security/sbom/current-sbom.json" ]; then
          echo "Running Grype scan..."
          grype sbom:docs/security/sbom/current-sbom.json -o json > docs/security/cve-reports/vulnerabilities.json || echo "Grype scan failed"
          cp docs/security/cve-reports/vulnerabilities.json website/static/sbom/ || echo "Copy vulnerabilities failed"
        fi
        
        # Python security with pip-audit
        if [ -f "requirements.txt" ]; then
          echo "🐍 Running Python security audit..."
          pip install pip-audit || echo "pip-audit install failed"
          pip-audit --format=json --output=docs/security/cve-reports/python-audit.json || echo "Python audit completed with issues"
          cp docs/security/cve-reports/python-audit.json website/static/sbom/ || echo "Copy Python audit failed"
        fi
        
        # Node.js security with npm audit
        if [ -f "website/package.json" ]; then
          echo "🟨 Running Node.js security audit..."
          cd website
          npm audit --json > ../docs/security/cve-reports/npm-audit.json || echo "npm audit completed with issues"
          cp ../docs/security/cve-reports/npm-audit.json ../website/static/sbom/ || echo "Copy npm audit failed"
          cd ..
        fi
        
        echo "✅ Vulnerability scans completed"

    - name: Generate SBOM summary
      shell: bash
      run: |
        echo "📋 Generating SBOM summary page..."
        
        # Create SBOM summary markdown
        cat > docs/security/current/sbom-summary.md << 'EOF'
---
title: Software Bill of Materials (SBOM)
description: Current software dependencies, vulnerabilities, and security analysis
sidebar_position: 1
---

# Software Bill of Materials (SBOM)

:::info Build Information
- **Generated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')
- **Repository**: ${{ github.repository }}
- **Branch**: ${{ github.ref_name }}
- **Commit**: [`${{ github.sha }}`](https://github.com/${{ github.repository }}/commit/${{ github.sha }})
:::

## 📋 Components Overview

### Repository Components
EOF
        
        # Add component information if SBOM exists
        if [ -f "docs/security/sbom/current-sbom.json" ]; then
          COMPONENTS=$(jq '.artifacts | length' docs/security/sbom/current-sbom.json 2>/dev/null || echo "0")
          echo "**Total Components**: $COMPONENTS" >> docs/security/current/sbom-summary.md
          echo "" >> docs/security/current/sbom-summary.md
          echo "| Component | Version | Type | License |" >> docs/security/current/sbom-summary.md
          echo "|-----------|---------|------|---------|" >> docs/security/current/sbom-summary.md
          jq -r '.artifacts[] | "| \(.name // "Unknown") | \(.version // "N/A") | \(.type // "Unknown") | \(.licenses[0].value // "Unknown") |"' docs/security/sbom/current-sbom.json 2>/dev/null | head -20 >> docs/security/current/sbom-summary.md || echo "| No components found | - | - | - |" >> docs/security/current/sbom-summary.md
        else
          echo "| Component | Version | Type | License |" >> docs/security/current/sbom-summary.md
          echo "|-----------|---------|------|---------|" >> docs/security/current/sbom-summary.md
          echo "| No components detected | - | - | - |" >> docs/security/current/sbom-summary.md
        fi
        
        # Add vulnerability analysis if available
        cat >> docs/security/current/sbom-summary.md << 'EOF'

## 🔍 Security Analysis

### Known Vulnerabilities
EOF
        
        if [ -f "docs/security/cve-reports/vulnerabilities.json" ] && [ -s "docs/security/cve-reports/vulnerabilities.json" ]; then
          # Count vulnerabilities by severity
          CRITICAL=$(jq '[.matches[] | select(.vulnerability.severity=="Critical")] | length' docs/security/cve-reports/vulnerabilities.json 2>/dev/null || echo "0")
          HIGH=$(jq '[.matches[] | select(.vulnerability.severity=="High")] | length' docs/security/cve-reports/vulnerabilities.json 2>/dev/null || echo "0")
          MEDIUM=$(jq '[.matches[] | select(.vulnerability.severity=="Medium")] | length' docs/security/cve-reports/vulnerabilities.json 2>/dev/null || echo "0")
          LOW=$(jq '[.matches[] | select(.vulnerability.severity=="Low")] | length' docs/security/cve-reports/vulnerabilities.json 2>/dev/null || echo "0")
          
          cat >> docs/security/current/sbom-summary.md << EOF

| Severity | Count | Action Required |
|----------|-------|-----------------|
| 🔴 Critical | $CRITICAL | Immediate fix required |
| 🟠 High | $HIGH | Fix within 7 days |
| 🟡 Medium | $MEDIUM | Fix within 30 days |
| 🟢 Low | $LOW | Monitor and plan |

#### Top Vulnerabilities

| CVE ID | Severity | Package | Version | Description |
|--------|----------|---------|---------|-------------|
EOF
          jq -r '.matches[] | select(.vulnerability.severity=="Critical" or .vulnerability.severity=="High") | "| \(.vulnerability.id // "Unknown") | \(.vulnerability.severity // "Unknown") | \(.artifact.name // "Unknown") | \(.artifact.version // "N/A") | \(.vulnerability.description // "No description")[0:100]... |"' docs/security/cve-reports/vulnerabilities.json 2>/dev/null | head -10 >> docs/security/current/sbom-summary.md || echo "| No critical/high vulnerabilities found | - | - | - | All dependencies are secure |" >> docs/security/current/sbom-summary.md
        else
          cat >> docs/security/current/sbom-summary.md << 'EOF'

| Severity | Count | Status |
|----------|-------|---------|
| ✅ All Clear | 0 | No vulnerabilities detected |
EOF
        fi
        
        # Add download links
        cat >> docs/security/current/sbom-summary.md << 'EOF'

## 📥 Download SBOM Files

### Raw SBOM Files

| Format | File | Description |
|--------|------|-------------|
| JSON (Syft) | [current-sbom.json](/inventag-aws/sbom/current-sbom.json) | Complete repository component analysis |
| CycloneDX | [current-sbom-cyclonedx.json](/inventag-aws/sbom/current-sbom-cyclonedx.json) | Industry-standard SBOM format |
| SPDX | [current-sbom-spdx.json](/inventag-aws/sbom/current-sbom-spdx.json) | Software Package Data Exchange format |
| Python (CycloneDX) | [python-sbom.json](/inventag-aws/sbom/python-sbom.json) | Python dependencies only |
| Node.js (CycloneDX) | [nodejs-website-sbom.json](/inventag-aws/sbom/nodejs-website-sbom.json) | Website dependencies |

### Security Reports

| Type | File | Description |
|------|------|-------------|
| Vulnerabilities | [vulnerabilities.json](/inventag-aws/sbom/vulnerabilities.json) | Comprehensive vulnerability scan |
| Python Audit | [python-audit.json](/inventag-aws/sbom/python-audit.json) | Python dependency security scan |
| npm Audit | [npm-audit.json](/inventag-aws/sbom/npm-audit.json) | Node.js dependency security scan |

## 🔧 Usage & Integration

:::tip Integration Benefits
This SBOM is automatically generated and integrated into the documentation build process, providing:
- **Real-time dependency tracking** - Updated with every build
- **Vulnerability monitoring** - Automatic security scanning with Grype
- **Compliance documentation** - Standard SBOM formats (CycloneDX, SPDX)
- **Version-specific tracking** - Historical dependency changes
- **Supply chain transparency** - Complete visibility into dependencies
:::

### Standards Compliance

- **SPDX 2.3**: Software Package Data Exchange format for license compliance
- **CycloneDX**: OWASP standard for software bill of materials
- **NIST SP 800-161**: Supply chain risk management guidelines
- **Executive Order 14028**: Federal cybersecurity requirements

*Last updated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')*
EOF
        
        echo "✅ SBOM summary generated"

    - name: Commit SBOM files
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      shell: bash
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
        
        # Add all SBOM-related files
        git add docs/security/ website/static/sbom/
        
        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "ℹ️ No SBOM changes to commit"
        else
          git commit -m "chore: update SBOM and security reports

- Generate updated Software Bill of Materials
- Update vulnerability scans and security reports
- Refresh component analysis and dependency tracking

🤖 Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"
          
          # Set up authentication for push
          git remote set-url origin https://x-access-token:${{ secrets.VERSION_BUMP_WORKFLOW || secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git
          git push origin main
          echo "✅ SBOM files committed and pushed"
        fi

    - name: Upload SBOM artifacts
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: sbom-security-reports
        path: |
          docs/security/sbom/
          docs/security/cve-reports/
        retention-days: 30

    - name: Generate summary
      if: always()
      shell: bash
      run: |
        echo "## 🔒 SBOM Generation Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Count components if SBOM exists
        if [ -f "docs/security/sbom/current-sbom.json" ]; then
          COMPONENTS=$(jq '.artifacts | length' docs/security/sbom/current-sbom.json 2>/dev/null || echo "0")
          echo "- **Total Components**: $COMPONENTS" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Count vulnerabilities if scan exists
        if [ -f "docs/security/cve-reports/vulnerabilities.json" ]; then
          TOTAL_VULNS=$(jq '.matches | length' docs/security/cve-reports/vulnerabilities.json 2>/dev/null || echo "0")
          CRITICAL=$(jq '[.matches[] | select(.vulnerability.severity=="Critical")] | length' docs/security/cve-reports/vulnerabilities.json 2>/dev/null || echo "0")
          HIGH=$(jq '[.matches[] | select(.vulnerability.severity=="High")] | length' docs/security/cve-reports/vulnerabilities.json 2>/dev/null || echo "0")
          echo "- **Total Vulnerabilities**: $TOTAL_VULNS" >> $GITHUB_STEP_SUMMARY
          echo "- **Critical**: $CRITICAL" >> $GITHUB_STEP_SUMMARY
          echo "- **High**: $HIGH" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "- **Generated**: $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 Available Files" >> $GITHUB_STEP_SUMMARY
        echo "- SBOM Summary: [View Documentation](https://habhabhabs.github.io/inventag-aws/docs/security/current/sbom-summary)" >> $GITHUB_STEP_SUMMARY
        echo "- Raw SBOM files available in artifacts and static directory" >> $GITHUB_STEP_SUMMARY