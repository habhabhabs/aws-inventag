name: Documentation Deployment

"on":
  push:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'website/**'
      - '.github/workflows/docs-deploy.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'docs/**'
      - 'website/**'
      - '.github/workflows/docs-deploy.yml'
  workflow_dispatch: # Allow manual triggering

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch full history for better git info

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'website/package-lock.json'

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Install dependencies
        working-directory: ./website
        run: |
          npm ci --prefer-offline --no-audit

      - name: Validate documentation structure
        run: |
          echo "Validating documentation structure..."
          
          # Check that docs directory exists
          if [ ! -d "docs" ]; then
            echo "Error: docs/ directory not found"
            exit 1
          fi
          
          # Check for required documentation files
          if [ ! -f "docs/index.md" ]; then
            echo "Warning: docs/index.md not found - this should be the main documentation entry point"
          fi
          
          # Count markdown files
          md_count=$(find docs -name "*.md" -type f | wc -l)
          echo "Found $md_count markdown files in docs/"
          
          if [ $md_count -eq 0 ]; then
            echo "Error: No markdown files found in docs/ directory"
            exit 1
          fi
          
          echo "Documentation structure validation passed"

      - name: Run documentation transformation pipeline
        id: transform
        run: |
          echo "Running comprehensive documentation transformation pipeline..."
          
          # Set environment variables for transformation
          export VERBOSE=true
          export DRY_RUN=false
          
          # Run the transformation pipeline
          node scripts/transform-docs.js
          
          # Check if any files were transformed
          if [ -f "transform.log" ]; then
            echo "Transformation log created"
            if grep -q "files transformed:" transform.log; then
              transformed_count=$(grep "files transformed:" transform.log | grep -o '[0-9]\+' | head -1)
              echo "transformation_count=$transformed_count" >> $GITHUB_OUTPUT
              echo "transformation_completed=true" >> $GITHUB_OUTPUT
            else
              echo "transformation_count=0" >> $GITHUB_OUTPUT
              echo "transformation_completed=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "transformation_count=0" >> $GITHUB_OUTPUT
            echo "transformation_completed=false" >> $GITHUB_OUTPUT
          fi
          
          # Display transformation summary
          if [ -f "transform.log" ]; then
            echo "=== Transformation Summary ==="
            tail -20 transform.log
          fi

      - name: Validate transformed documentation
        run: |
          echo "Validating documentation structure and content..."
          
          # Run migration-friendly validation (tolerant of expected migration issues)
          export VERBOSE=true
          node scripts/validate-docs-migration.js
          
          # Check validation results
          validation_exit_code=$?
          
          if [ $validation_exit_code -eq 0 ]; then
            echo "✅ Documentation validation passed"
            echo "validation_passed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Documentation validation failed with critical errors"
            echo "validation_passed=false" >> $GITHUB_OUTPUT
            
            # In non-strict mode, continue with warnings for PR preview
            if [ "${{ github.event_name }}" = "pull_request" ]; then
              echo "⚠️ Continuing with validation warnings for PR preview"
            else
              echo "🛑 Stopping deployment due to critical validation errors"
              exit 1
            fi
          fi

      - name: Build documentation site with fallback
        working-directory: ./website
        run: |
          echo "Building Docusaurus documentation site..."
          
          # Set environment variables for build
          export NODE_ENV=production
          export DOCUSAURUS_SSR_CONCURRENCY=2
          
          # Attempt to build the site
          build_success=false
          
          echo "Attempting primary build..."
          if npm run build; then
            echo "✅ Primary build successful"
            build_success=true
          else
            echo "❌ Primary build failed, attempting fallback..."
            
            # Fallback strategy: restore from backups if they exist
            if [ -d "../.docs-backup" ]; then
              echo "Restoring documentation from backup..."
              
              # Restore files from backup
              find ../.docs-backup -name "*.md" -type f | while read backup_file; do
                relative_path=${backup_file#../.docs-backup/}
                original_path="../docs/$relative_path"
                
                if [ -f "$backup_file" ]; then
                  mkdir -p "$(dirname "$original_path")"
                  cp "$backup_file" "$original_path"
                  echo "Restored: $original_path"
                fi
              done
              
              echo "Attempting build with restored files..."
              if npm run build; then
                echo "✅ Fallback build successful"
                build_success=true
              else
                echo "❌ Fallback build also failed"
              fi
            else
              echo "No backup available for fallback"
            fi
          fi
          
          # Check if build was successful
          if [ "$build_success" = false ]; then
            echo "🛑 All build attempts failed"
            exit 1
          fi
          
          echo "Build completed successfully"
          
          # Verify build output
          if [ ! -d "build" ]; then
            echo "Error: Build directory not found"
            exit 1
          fi
          
          # Check build size
          build_size=$(du -sh build | cut -f1)
          echo "Build size: $build_size"
          
          # List key files
          echo "Build contents:"
          ls -la build/

      - name: Validate build output
        working-directory: ./website
        run: |
          echo "Validating build output..."
          
          # Check for essential files
          essential_files=("build/index.html" "build/404.html")
          
          for file in "${essential_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "Error: Essential file missing: $file"
              exit 1
            else
              echo "Found: $file"
            fi
          done
          
          # Check for assets
          if [ ! -d "build/assets" ]; then
            echo "Warning: No assets directory found"
          else
            asset_count=$(find build/assets -type f | wc -l)
            echo "Found $asset_count asset files"
          fi
          
          # Validate HTML structure of index page
          if command -v grep > /dev/null; then
            if grep -q "<title>" build/index.html; then
              echo "HTML structure looks valid"
            else
              echo "Warning: HTML structure may be incomplete"
            fi
          fi
          
          echo "Build validation completed"

      - name: Run documentation health monitoring
        run: |
          echo "Running comprehensive documentation health monitoring..."
          
          # Set environment variables
          export VERBOSE=true
          
          # Run health monitoring
          node scripts/monitor-docs.js
          
          # Upload monitoring results as artifacts
          if [ -d ".docs-logs" ]; then
            echo "Monitoring logs created"
            ls -la .docs-logs/
          fi

      - name: Upload build artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./website/build

      - name: Upload monitoring logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: documentation-logs
          path: |
            transform.log
            .docs-logs/
          retention-days: 30

  # Deployment job (only runs on main branch)
  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  # Preview job for pull requests
  preview:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Comment PR with preview info
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo, number } = context.issue;
            
            const comment = `## Documentation Preview
            
            The documentation build completed successfully! 
            
            **Build Summary:**
            - Documentation files validated
            - Docusaurus build successful
            - Output validation passed
            
            **Note:** This is a pull request preview. The documentation will be deployed to GitHub Pages when merged to main.
            
            **Preview locally:**
            \`\`\`bash
            cd website
            npm install
            npm start
            \`\`\`
            
            ---
            *This comment was automatically generated by the documentation deployment workflow.*`;
            
            // Check if we already commented
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number: number,
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes('Documentation Preview')
            );
            
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: existingComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: number,
                body: comment
              });
            }