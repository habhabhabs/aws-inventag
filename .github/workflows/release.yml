name: Automated Release

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_bump:
        description: 'Version bump type'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: write
  issues: write
  pull-requests: write
  actions: write

jobs:
  check-for-release:
    name: Check if Release Needed
    runs-on: ubuntu-latest
    outputs:
      should_release: ${{ steps.check.outputs.should_release }}
      version_bump: ${{ steps.check.outputs.version_bump }}
      pr_number: ${{ steps.check.outputs.pr_number }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Check for release triggers
      id: check
      run: |
        # Default to no release
        echo "should_release=false" >> $GITHUB_OUTPUT
        echo "version_bump=patch" >> $GITHUB_OUTPUT
        echo "pr_number=" >> $GITHUB_OUTPUT
        
        # Check if manual dispatch with version bump
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "should_release=true" >> $GITHUB_OUTPUT
          echo "version_bump=${{ github.event.inputs.version_bump }}" >> $GITHUB_OUTPUT
          echo "Manual release triggered with ${{ github.event.inputs.version_bump }} bump"
          exit 0
        fi
        
        # Check if this is a merge to main
        if [ "${{ github.event_name }}" = "push" ] && [ "${{ github.ref }}" = "refs/heads/main" ]; then
          # Get the merged PR info from the commit message
          COMMIT_MSG=$(git log --format=%B -n 1 ${{ github.sha }})
          echo "Commit message: $COMMIT_MSG"
          
          # Check if this is a merge commit from a PR
          if echo "$COMMIT_MSG" | grep -q "Merge pull request #"; then
            # Extract PR number
            PR_NUM=$(echo "$COMMIT_MSG" | grep -o "#[0-9]\+" | sed 's/#//')
            echo "pr_number=$PR_NUM" >> $GITHUB_OUTPUT
            
            # Get PR labels to determine version bump
            PR_LABELS=$(gh pr view $PR_NUM --json labels --jq '.labels[].name' || echo "")
            echo "PR Labels: $PR_LABELS"
            
            # Determine version bump from labels
            if echo "$PR_LABELS" | grep -q "release:major"; then
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "version_bump=major" >> $GITHUB_OUTPUT
              echo "Major release triggered by PR #$PR_NUM"
            elif echo "$PR_LABELS" | grep -q "release:minor"; then
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "version_bump=minor" >> $GITHUB_OUTPUT
              echo "Minor release triggered by PR #$PR_NUM"
            elif echo "$PR_LABELS" | grep -q "release:patch"; then
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "version_bump=patch" >> $GITHUB_OUTPUT
              echo "Patch release triggered by PR #$PR_NUM"
            else
              # Default to patch release for any PR merge to main
              echo "should_release=true" >> $GITHUB_OUTPUT
              echo "version_bump=patch" >> $GITHUB_OUTPUT
              echo "Default patch release for PR #$PR_NUM (no version label found)"
            fi
          else
            echo "Direct push to main - no release triggered"
          fi
        fi
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: check-for-release
    if: needs.check-for-release.outputs.should_release == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
        persist-credentials: true

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install semver

    - name: Calculate new version
      id: version
      run: |
        # Read current version
        CURRENT_VERSION=$(python -c "import json; print(json.load(open('version.json'))['version'])")
        echo "Current version: $CURRENT_VERSION"
        
        # Calculate new version based on bump type
        BUMP_TYPE="${{ needs.check-for-release.outputs.version_bump }}"
        echo "Bump type: $BUMP_TYPE"
        
        NEW_VERSION=$(python -c "
        import semver
        version = '$CURRENT_VERSION'
        if '$BUMP_TYPE' == 'major':
            new_ver = semver.VersionInfo.parse(version).bump_major()
        elif '$BUMP_TYPE' == 'minor':
            new_ver = semver.VersionInfo.parse(version).bump_minor()
        else:
            new_ver = semver.VersionInfo.parse(version).bump_patch()
        print(str(new_ver))
        ")
        
        echo "New version: $NEW_VERSION"
        echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "tag_name=v$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Generate comprehensive release notes for version.json
      id: version_notes
      run: |
        # Get commits since last tag for version.json release notes
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LAST_TAG" ]; then
          echo "No previous tags found, generating notes from first commit"
          COMMIT_RANGE="$(git rev-list --max-parents=0 HEAD)..HEAD"
        else
          echo "Last tag: $LAST_TAG"
          COMMIT_RANGE="$LAST_TAG..HEAD"
        fi
        
        # Generate structured release notes for version.json
        python -c "
        import json
        import subprocess
        import re
        from datetime import datetime
        
        # Get commit messages
        result = subprocess.run(['git', 'log', '$COMMIT_RANGE', '--pretty=format:%s', '--no-merges'], 
                              capture_output=True, text=True)
        commits = result.stdout.strip().split('\n') if result.stdout.strip() else []
        
        # Categorize commits
        features = []
        fixes = []
        docs = []
        chores = []
        style = []
        refactor = []
        perf = []
        test = []
        other = []
        
        for commit in commits:
            if not commit.strip():
                continue
            commit_lower = commit.lower()
            if commit_lower.startswith('feat'):
                features.append(commit)
            elif commit_lower.startswith('fix'):
                fixes.append(commit)
            elif commit_lower.startswith('docs'):
                docs.append(commit)
            elif commit_lower.startswith('chore'):
                chores.append(commit)
            elif commit_lower.startswith('style'):
                style.append(commit)
            elif commit_lower.startswith('refactor'):
                refactor.append(commit)
            elif commit_lower.startswith('perf'):
                perf.append(commit)
            elif commit_lower.startswith('test'):
                test.append(commit)
            else:
                other.append(commit)
        
        # Build comprehensive release notes
        notes_parts = []
        notes_parts.append(f'Release ${{ steps.version.outputs.new_version }} - {datetime.now().strftime(\"%Y-%m-%d\")}')
        notes_parts.append('')
        
        if features:
            notes_parts.append('✨ New Features:')
            for feat in features:
                notes_parts.append(f'  • {feat}')
            notes_parts.append('')
        
        if fixes:
            notes_parts.append('🐛 Bug Fixes:')
            for fix in fixes:
                notes_parts.append(f'  • {fix}')
            notes_parts.append('')
        
        if docs:
            notes_parts.append('📚 Documentation:')
            for doc in docs:
                notes_parts.append(f'  • {doc}')
            notes_parts.append('')
        
        if style:
            notes_parts.append('💄 Style Changes:')
            for s in style:
                notes_parts.append(f'  • {s}')
            notes_parts.append('')
        
        if refactor:
            notes_parts.append('♻️ Code Refactoring:')
            for r in refactor:
                notes_parts.append(f'  • {r}')
            notes_parts.append('')
        
        if perf:
            notes_parts.append('⚡ Performance Improvements:')
            for p in perf:
                notes_parts.append(f'  • {p}')
            notes_parts.append('')
        
        if test:
            notes_parts.append('✅ Tests:')
            for t in test:
                notes_parts.append(f'  • {t}')
            notes_parts.append('')
        
        if chores:
            notes_parts.append('🔧 Maintenance:')
            for chore in chores:
                notes_parts.append(f'  • {chore}')
            notes_parts.append('')
        
        if other:
            notes_parts.append('📝 Other Changes:')
            for o in other:
                notes_parts.append(f'  • {o}')
            notes_parts.append('')
        
        # Add summary statistics
        total_commits = len([c for c in commits if c.strip()])
        if total_commits > 0:
            notes_parts.append(f'📊 Summary: {total_commits} commits in this release')
            
            if '${{ needs.check-for-release.outputs.pr_number }}':
                notes_parts.append(f'🔀 Triggered by PR #${{ needs.check-for-release.outputs.pr_number }}')
        
        release_notes = '\n'.join(notes_parts)
        print('Generated release notes for version.json:')
        print(release_notes)
        print('---')
        
        # Save release notes to a file for the next step
        with open('version_release_notes.txt', 'w') as f:
            f.write(release_notes)
        "


    - name: Generate release notes
      id: release_notes
      run: |
        # Get commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        
        if [ -z "$LAST_TAG" ]; then
          echo "No previous tags found, generating notes from first commit"
          COMMIT_RANGE="$(git rev-list --max-parents=0 HEAD)..HEAD"
        else
          echo "Last tag: $LAST_TAG"
          COMMIT_RANGE="$LAST_TAG..HEAD"
        fi
        
        echo "Generating release notes for commits: $COMMIT_RANGE"
        
        # Generate release notes
        cat > release_notes.md << 'EOF'
        # Release ${{ steps.version.outputs.new_version }}
        
        ## What's Changed
        
        EOF
        
        # Add commit messages (exclude merge commits)
        git log $COMMIT_RANGE --pretty=format:"- %s" --no-merges >> release_notes.md
        
        # Add PR info if available
        if [ -n "${{ needs.check-for-release.outputs.pr_number }}" ]; then
          echo "" >> release_notes.md
          echo "**Triggered by PR #${{ needs.check-for-release.outputs.pr_number }}**" >> release_notes.md
        fi
        
        # Add changelog sections based on commit types
        echo "" >> release_notes.md
        echo "## Changes by Type" >> release_notes.md
        echo "" >> release_notes.md
        
        # Features
        FEATURES=$(git log $COMMIT_RANGE --pretty=format:"- %s" --no-merges | grep -i "^- feat" || true)
        if [ -n "$FEATURES" ]; then
          echo "### ✨ New Features" >> release_notes.md
          echo "$FEATURES" >> release_notes.md
          echo "" >> release_notes.md
        fi
        
        # Bug fixes
        FIXES=$(git log $COMMIT_RANGE --pretty=format:"- %s" --no-merges | grep -i "^- fix" || true)
        if [ -n "$FIXES" ]; then
          echo "### 🐛 Bug Fixes" >> release_notes.md
          echo "$FIXES" >> release_notes.md
          echo "" >> release_notes.md
        fi
        
        # Documentation
        DOCS=$(git log $COMMIT_RANGE --pretty=format:"- %s" --no-merges | grep -i "^- docs" || true)
        if [ -n "$DOCS" ]; then
          echo "### 📚 Documentation" >> release_notes.md
          echo "$DOCS" >> release_notes.md
          echo "" >> release_notes.md
        fi
        
        # Performance improvements
        PERF=$(git log $COMMIT_RANGE --pretty=format:"- %s" --no-merges | grep -i "^- perf" || true)
        if [ -n "$PERF" ]; then
          echo "### ⚡ Performance Improvements" >> release_notes.md
          echo "$PERF" >> release_notes.md
          echo "" >> release_notes.md
        fi
        
        # Other changes
        OTHER=$(git log $COMMIT_RANGE --pretty=format:"- %s" --no-merges | grep -v -i "^- feat\|^- fix\|^- docs\|^- perf" || true)
        if [ -n "$OTHER" ]; then
          echo "### 🔧 Other Changes" >> release_notes.md
          echo "$OTHER" >> release_notes.md
          echo "" >> release_notes.md
        fi
        
        # Add installation/usage info
        cat >> release_notes.md << 'EOF'
        
        ## Installation & Usage
        
        ### Quick Start
        ```bash
        # Clone the repository
        git clone https://github.com/${{ github.repository }}.git
        cd $(basename ${{ github.repository }})
        
        # Install dependencies
        pip install -r requirements.txt
        
        # Run AWS resource inventory (if available)
        if [ -f "scripts/legacy/aws_resource_inventory.py" ]; then
          python scripts/legacy/aws_resource_inventory.py --output inventory
        fi
        
        # Convert to Excel/CSV format
        python scripts/legacy/bom_converter.py --input sample.json --output report.xlsx
        
        # Check tag compliance
        python scripts/legacy/tag_compliance_checker.py --config tag_policy.yaml --input sample.json --output compliance_report
        
        # Test CI/CD BOM generation
        python scripts/development/cicd_bom_generation.py --help
        ```
        
        ### Docker Usage
        ```bash
        docker build -t inventag-aws:${{ steps.version.outputs.new_version }} .
        docker run --rm -v ~/.aws:/root/.aws inventag-aws:${{ steps.version.outputs.new_version }}
        ```
        
        ## Full Changelog
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/$LAST_TAG...${{ steps.version.outputs.tag_name }}
        EOF
        
        echo "Release notes generated:"
        cat release_notes.md

    - name: Prepare release information
      run: |
        # Just save the version info - no need to commit anything to protected branch
        echo "Version info saved for release creation"
        echo "New version: ${{ steps.version.outputs.new_version }}"
        echo "Previous version: ${{ steps.version.outputs.current_version }}"
        echo "Release notes available in version_release_notes.txt"

    - name: Create Git Tag
      run: |
        # Create tag from the current HEAD on main (before version bump)
        # This allows the release to be created even with protected branches
        git tag ${{ steps.version.outputs.tag_name }}
        git push origin ${{ steps.version.outputs.tag_name }}
        echo "Created and pushed tag ${{ steps.version.outputs.tag_name }}"

    - name: Create GitHub Release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create ${{ steps.version.outputs.tag_name }} \
          --title "Release ${{ steps.version.outputs.new_version }}" \
          --notes-file release_notes.md \
          --latest

    - name: Upload Release Assets
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Create a source archive
        git archive --format=tar.gz --prefix=inventag-aws-${{ steps.version.outputs.new_version }}/ HEAD > inventag-aws-${{ steps.version.outputs.new_version }}.tar.gz
        
        # Upload to release
        gh release upload ${{ steps.version.outputs.tag_name }} inventag-aws-${{ steps.version.outputs.new_version }}.tar.gz

    - name: Create ZIP archive for release
      run: |
        # Create a clean ZIP archive of the repository
        mkdir -p inventag-aws-${{ steps.version.outputs.new_version }}
        git archive HEAD | tar -x -C inventag-aws-${{ steps.version.outputs.new_version }}/
        
        # Create ZIP file
        zip -r inventag-aws-${{ steps.version.outputs.new_version }}.zip inventag-aws-${{ steps.version.outputs.new_version }}/
        
        # Upload ZIP to release
        gh release upload ${{ steps.version.outputs.tag_name }} inventag-aws-${{ steps.version.outputs.new_version }}.zip
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Post-release notification
      run: |
        echo "🚀 Successfully created release ${{ steps.version.outputs.new_version }}"
        echo "📦 Release URL: https://github.com/${{ github.repository }}/releases/tag/${{ steps.version.outputs.tag_name }}"
        echo "📋 Release created for version ${{ steps.version.outputs.new_version }} (${{ needs.check-for-release.outputs.version_bump }} release)"
        echo "✅ No version bump commits needed - release created directly from current HEAD"

  test-release:
    name: Test Release
    runs-on: ubuntu-latest
    needs: [check-for-release, release]
    if: needs.check-for-release.outputs.should_release == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Test installation
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Test BOM converter
      run: |
        python scripts/legacy/bom_converter.py --help
        echo "✅ BOM converter works correctly"

    - name: Test tag compliance checker
      run: |
        if [ -f scripts/legacy/tag_compliance_checker.py ]; then
          python scripts/legacy/tag_compliance_checker.py --help
          echo "✅ Tag compliance checker works correctly"
        fi

    - name: Test AWS resource inventory
      run: |
        if [ -f scripts/legacy/aws_resource_inventory.py ]; then
          python scripts/legacy/aws_resource_inventory.py --help
          echo "✅ AWS resource inventory works correctly"
        else
          echo "ℹ️ AWS resource inventory script not found - skipping"
        fi

    - name: Test CI/CD BOM generation
      run: |
        python scripts/development/cicd_bom_generation.py --help
        echo "✅ CI/CD BOM generation works correctly"