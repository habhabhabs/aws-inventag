name: Create Documentation Version

"on":
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to create (e.g., v4.3.0)'
        required: true
        type: string
      create_tag:
        description: 'Create git tag if it does not exist'
        required: false
        default: true
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  create-version:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for git operations
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'website/package-lock.json'

      - name: Validate version input
        id: validate
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "Validating version: $VERSION"
          
          # Check version format
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "❌ Error: Version must follow format vX.Y.Z (e.g., v4.3.0)"
            exit 1
          fi
          
          # Check if version already exists in versions.json
          if [ -f "website/versions.json" ]; then
            if jq -e --arg v "$VERSION" 'index($v) != null' website/versions.json > /dev/null; then
              echo "❌ Error: Version $VERSION already exists in versions.json"
              exit 1
            fi
          fi
          
          # Check if git tag exists (if we're not supposed to create it)
          if git tag --list | grep -q "^$VERSION$" && [ "${{ github.event.inputs.create_tag }}" != "true" ]; then
            echo "❌ Error: Git tag $VERSION already exists and create_tag is disabled"
            exit 1
          fi
          
          echo "✅ Version validation passed"
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Install dependencies
        working-directory: ./website
        run: |
          npm ci --prefer-offline --no-audit

      - name: Create git tag (if requested)
        if: github.event.inputs.create_tag == 'true'
        run: |
          VERSION="${{ steps.validate.outputs.version }}"
          
          if git tag --list | grep -q "^$VERSION$"; then
            echo "ℹ️ Git tag $VERSION already exists"
          else
            echo "📦 Creating git tag: $VERSION"
            git config user.name "github-actions[bot]"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git tag "$VERSION"
            echo "✅ Git tag created"
          fi

      - name: Pre-flight documentation check
        run: |
          echo "Running pre-flight documentation checks..."
          
          # Validate current documentation structure
          if [ ! -d "docs" ]; then
            echo "❌ Error: docs/ directory not found"
            exit 1
          fi
          
          doc_count=$(find docs -name "*.md" -type f | wc -l)
          if [ $doc_count -eq 0 ]; then
            echo "❌ Error: No documentation files found"
            exit 1
          fi
          
          echo "✅ Found $doc_count documentation files"
          
          # Check for required files
          essential_files=("docs/index.md" "docs/getting-started/quick-start.md")
          for file in "${essential_files[@]}"; do
            if [ ! -f "$file" ]; then
              echo "⚠️ Warning: Essential file missing: $file"
            else
              echo "✅ Found: $file"
            fi
          done

      - name: Create documentation version
        working-directory: ./website
        run: |
          VERSION="${{ steps.validate.outputs.version }}"
          
          echo "📚 Creating Docusaurus documentation version: $VERSION"
          
          # Create the version
          npm run docusaurus -- docs:version "$VERSION"
          
          # Verify the version was created
          if [ ! -d "versioned_docs/version-$VERSION" ]; then
            echo "❌ Error: Version directory was not created"
            exit 1
          fi
          
          if [ ! -f "versioned_sidebars/version-$VERSION-sidebars.json" ]; then
            echo "❌ Error: Version sidebar was not created"
            exit 1
          fi
          
          # Check that versions.json was updated
          if ! jq -e --arg v "$VERSION" 'index($v) != null' versions.json > /dev/null; then
            echo "❌ Error: Version was not added to versions.json"
            exit 1
          fi
          
          echo "✅ Documentation version $VERSION created successfully"

      - name: Update configuration for next development version
        working-directory: ./website
        run: |
          VERSION="${{ steps.validate.outputs.version }}"
          
          echo "🔄 Updating configuration for next development version..."
          
          # Extract version components
          MAJOR=$(echo $VERSION | sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)/\1/')
          MINOR=$(echo $VERSION | sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)/\2/')
          PATCH=$(echo $VERSION | sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)/\3/')
          
          # Calculate next development version (increment minor)
          NEXT_MINOR=$((MINOR + 1))
          NEXT_DEV_VERSION="v${MAJOR}.${NEXT_MINOR}.0-dev"
          
          echo "Next development version: $NEXT_DEV_VERSION"
          
          # Update docusaurus.config.js
          sed -i.bak "s/v[0-9]*\.[0-9]*\.[0-9]*-dev (Current)/$NEXT_DEV_VERSION (Current)/" docusaurus.config.js
          
          # Add the new version to the versions configuration
          if ! grep -q "v$VERSION" docusaurus.config.js; then
            # Add version configuration
            sed -i.bak "/current: {/a\\
            },\\
            '$VERSION': {\\
              label: '$VERSION',\\
              badge: false,\
            " docusaurus.config.js
          fi
          
          echo "✅ Configuration updated"

      - name: Test the versioned build
        working-directory: ./website
        run: |
          echo "🧪 Testing the versioned documentation build..."
          
          # Set production environment
          export NODE_ENV=production
          
          # Attempt to build
          if npm run build; then
            echo "✅ Build successful with new version"
          else
            echo "❌ Build failed with new version"
            echo "This may indicate issues with the version creation"
            exit 1
          fi
          
          # Check that version-specific content was built
          VERSION="${{ steps.validate.outputs.version }}"
          if find build -path "*$VERSION*" -type f | head -5; then
            echo "✅ Version-specific content found in build"
          else
            echo "ℹ️ No version-specific content detected (this may be normal)"
          fi

      - name: Generate version creation summary
        id: summary
        run: |
          VERSION="${{ steps.validate.outputs.version }}"
          
          # Count files in the new version
          VERSION_DOCS=$(find website/versioned_docs/version-$VERSION -name "*.md" -type f | wc -l)
          TOTAL_VERSIONS=$(jq length website/versions.json)
          
          # Generate summary
          cat > version-summary.md << EOF
          # Documentation Version $VERSION Created
          
          ## Summary
          - **Version**: $VERSION
          - **Documentation files**: $VERSION_DOCS
          - **Total versions**: $TOTAL_VERSIONS
          - **Git tag**: ${{ github.event.inputs.create_tag == 'true' && 'Created' || 'Not created' }}
          
          ## Files Created
          - \`website/versioned_docs/version-$VERSION/\`
          - \`website/versioned_sidebars/version-$VERSION-sidebars.json\`
          
          ## Updated Files
          - \`website/versions.json\`
          - \`website/docusaurus.config.js\`
          
          ## Next Steps
          1. Review the generated version documentation
          2. Test the documentation site locally
          3. Push the changes to trigger deployment
          
          Generated: $(date)
          EOF
          
          echo "summary_created=true" >> $GITHUB_OUTPUT
          
          # Display summary
          echo "=== Version Creation Summary ==="
          cat version-summary.md

      - name: Commit version changes
        run: |
          VERSION="${{ steps.validate.outputs.version }}"
          
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Add all version-related changes
          git add website/versioned_docs/
          git add website/versioned_sidebars/
          git add website/versions.json
          git add website/docusaurus.config.js
          
          # Create commit
          git commit -m "docs: create documentation version $VERSION

          - Add versioned documentation for $VERSION
          - Update configuration for next development cycle
          - Generated $(find website/versioned_docs/version-$VERSION -name "*.md" | wc -l) documentation files
          
          🤖 Generated with GitHub Actions"
          
          echo "✅ Changes committed"

      - name: Push changes and tags
        run: |
          VERSION="${{ steps.validate.outputs.version }}"
          
          echo "📤 Pushing changes to repository..."
          
          # Push the commit
          git push origin main
          
          # Push tags if created
          if [ "${{ github.event.inputs.create_tag }}" == "true" ]; then
            echo "📤 Pushing git tag: $VERSION"
            git push origin "$VERSION"
          fi
          
          echo "✅ All changes pushed successfully"

      - name: Create summary issue comment
        if: always() && steps.summary.outputs.summary_created == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const version = '${{ steps.validate.outputs.version }}';
            
            let summary = '';
            try {
              summary = fs.readFileSync('version-summary.md', 'utf8');
            } catch (error) {
              summary = `Version ${version} creation completed.`;
            }
            
            const statusEmoji = '${{ job.status }}' === 'success' ? '✅' : 
                               '${{ job.status }}' === 'failure' ? '❌' : '⚠️';
            
            const comment = `## Documentation Version Creation ${statusEmoji}
            
            ${summary}
            
            **Workflow Status**: ${{ job.status }}
            **Run ID**: [${context.runId}](${context.payload.repository.html_url}/actions/runs/${context.runId})
            
            ---
            *This comment was automatically generated by the Create Documentation Version workflow.*`;
            
            console.log('Version creation summary:', comment);

      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: version-creation-logs
          path: |
            version-summary.md
            website/versions.json
            website/docusaurus.config.js
          retention-days: 90